{"version":3,"sources":["assets/refresh.svg","components/Avatar.tsx","components/Text.tsx","components/Button.tsx","services/firebase.tsx","services/localStorage.tsx","services/functions.tsx","services/utils.tsx","pages/Home.tsx","hooks/useGame.tsx","assets/cross.svg","assets/crown.svg","pages/Lobby.tsx","components/WaitingRoom.tsx","components/Timer.tsx","components/ButtonQuestion.tsx","components/Question.tsx","pages/Board.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Avatar","url","outline","small","refreshAvatar","className","src","alt","onClick","refreshIcon","defaultProps","Text","content","Button","label","disabled","icon","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","exportedObject","db","getFirestore","functions","getFunctions","savePlayerID","id","localStorage","setItem","getPlayerID","getItem","createGame","userID","userName","body","httpsCallable","firebase","then","response","data","catch","error","message","joinGame","gameID","sendResult","answer","generateID","Math","random","toString","substring","generateAvatarUrl","AvatarGenerator","generateRandomAvatar","replace","basePseudo","require","generateUsername","Home","useState","avatarUrl","setAvatarUrl","pseudo","setPseudo","redirect","setRedirect","setGameID","setDisabled","gameIDParam","useParams","invited","showMessage","useContext","toaster","create","a","fetchedgameID","join","to","type","onChange","event","target","value","placeholder","useGame","setData","isPending","setIsPending","setError","useEffect","unsubscribe","onSnapshot","doc","Lobby","fetchError","state","isUserAdmin","user","users","find","admin","console","log","startText","window","screen","width","location","hostname","navigator","clipboard","writeText","err","playerList","idUser","kickUser","startGame","deleteUser","map","index","name","userTargeted","currentUser","clickCross","crown","cross","WaitingRoom","answersState","length","Timer","next","time","setTime","setTimeout","ButtonQuestion","Question","question","questions","setQuestions","reveal","setReveal","tmp","q","click","toUpperCase","Board","testID","game","BoarPage","props","startQuestions","setState","subState","handleResult","valide","currentQuestionIndex","this","ques","category","difficulty","answers","Component","createContext","_message","App","setMessage","Provider","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.218fc511.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/refresh.91424661.svg\";","import 'styles/Avatar.scss'\r\nimport refreshIcon from 'assets/refresh.svg'\r\n\r\ninterface AvatarProps {\r\n  url: string;\r\n  outline: boolean;\r\n  small: boolean;\r\n  refreshAvatar:Function;\r\n}\r\n\r\nAvatar.defaultProps = {\r\n  url: null,\r\n  outline: false,\r\n  small: false,\r\n  refreshAvatar: null\r\n};\r\n\r\nexport default function Avatar({url,outline,small ,refreshAvatar}:AvatarProps){\r\n\r\n  const refresh = ()=>{\r\n    refreshAvatar()\r\n  }\r\n\r\n  return (\r\n    <div className=\"avatar\">\r\n      <div className={`${small ?'avatar__wrapper_small': 'avatar__wrapper'} ${outline ? 'avatar--outined' : ''}`}>\r\n        <img src={url} alt=\"avatar face\"  className=\"avatar__face\"/>\r\n      </div>\r\n      {!!refreshAvatar && <button className=\"avatar__refresh\" onClick={refresh}>\r\n        <img src={refreshIcon} alt=\"refresh avatar\" />\r\n      </button>}\r\n    </div>\r\n  )\r\n}\r\n","import \"styles/Text.scss\"\r\n\r\ninterface TextProps {\r\n  content: string;\r\n}\r\n\r\nexport default function Text({content}:TextProps){\r\n  return (\r\n    <span className=\"text\">{content}</span>\r\n  )\r\n}","import \"styles/Button.scss\";\r\nimport Text from \"components/Text\";\r\n\r\ninterface ButtonProps {\r\n  label: string;\r\n  onClick: () => void;\r\n  disabled: boolean;\r\n  icon: string;\r\n}\r\n\r\nButton.defaultProps = {\r\n  disabled: false,\r\n  icon: \"\",\r\n};\r\n\r\nexport default function Button({\r\n  label,\r\n  onClick,\r\n  disabled,\r\n  icon,\r\n}: ButtonProps) {\r\n  return (\r\n    <button\r\n      className={`button ${disabled ? \"button_disabled\" : \"\"}`}\r\n      onClick={onClick}\r\n    >\r\n      <img src={icon} alt=\"\" />\r\n      <Text content={label} />\r\n    </button>\r\n  );\r\n}\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, connectFirestoreEmulator } from \"firebase/firestore\";\r\nimport { getFunctions, connectFunctionsEmulator } from \"firebase/functions\";\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBrV54oJIM0agz-WbQ5epUkCCQoQ6f-J7M\",\r\n  authDomain: \"tarot-b3e06.firebaseapp.com\",\r\n  projectId: \"tarot-b3e06\",\r\n  storageBucket: \"tarot-b3e06.appspot.com\",\r\n  messagingSenderId: \"472741955571\",\r\n  appId: \"1:472741955571:web:26c8fcc9608d78a28af486\",\r\n  measurementId: \"G-2RHRYPTBEH\",\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore();\r\nconst functions = getFunctions(app);\r\n//connectFunctionsEmulator(functions, \"localhost\", 5001);\r\n//connectFirestoreEmulator(db, \"localhost\", 8080);\r\n\r\nconst exportedObject = {\r\n  db,\r\n  app,\r\n  functions,\r\n};\r\n\r\nexport default exportedObject;\r\n","export function savePlayerID(id: string) {\r\n  localStorage.setItem(\"userID\", id);\r\n}\r\n\r\nexport function getPlayerID() {\r\n  return localStorage.getItem(\"userID\");\r\n}\r\n","import firebase from \"services/firebase\";\r\nimport { httpsCallable } from \"firebase/functions\";\r\nimport { savePlayerID } from \"services/localStorage\";\r\nimport { FirebaseError } from \"@firebase/util\";\r\n\r\nfunction createGame(url: string, userID: string, userName: string) {\r\n  const body = { url, userID, userName };\r\n\r\n  savePlayerID(userID);\r\n  return httpsCallable(\r\n    firebase.functions,\r\n    \"createGame\"\r\n  )(body)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error: FirebaseError) => {\r\n      throw error.message;\r\n    });\r\n}\r\n\r\nfunction joinGame(\r\n  url: string,\r\n  userID: string,\r\n  userName: string,\r\n  gameID: string\r\n) {\r\n  const body = { url, userID, userName, gameID };\r\n\r\n  savePlayerID(userID);\r\n  return httpsCallable(\r\n    firebase.functions,\r\n    \"joinGame\"\r\n  )(body)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error: FirebaseError) => {\r\n      throw error.message;\r\n    });\r\n}\r\n\r\nfunction kickUser(userID: string, gameID: string) {\r\n  const body = { userID, gameID };\r\n\r\n  return httpsCallable(\r\n    firebase.functions,\r\n    \"kickUser\"\r\n  )(body)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error: FirebaseError) => {\r\n      throw error.message;\r\n    });\r\n}\r\n\r\nfunction startGame(gameID: string) {\r\n  const body = { gameID };\r\n\r\n  return httpsCallable(\r\n    firebase.functions,\r\n    \"startGame\"\r\n  )(body)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error: FirebaseError) => {\r\n      throw error.message;\r\n    });\r\n}\r\n\r\nfunction sendResult(gameID: string, userID: string, answer: boolean) {\r\n  const body = { gameID, userID, answer };\r\n\r\n  return httpsCallable(\r\n    firebase.functions,\r\n    \"sendResult\"\r\n  )(body)\r\n    .then((response) => {\r\n      return response.data;\r\n    })\r\n    .catch((error: FirebaseError) => {\r\n      throw error.message;\r\n    });\r\n}\r\n\r\nexport { createGame, joinGame, kickUser, startGame, sendResult };\r\n","import { AvatarGenerator } from 'random-avatar-generator';\r\n\r\nexport function generateID(){\r\n  return Math.random().toString().substring(2)\r\n}\r\n\r\nexport function generateAvatarUrl(){\r\n  const generator = new AvatarGenerator();\r\n  let avatarUrl =  generator.generateRandomAvatar()\r\n  return avatarUrl.replace(\"Circle\",\"Transparent\") \r\n}\r\n\r\nexport function getUrlBase(){\r\n  return `${window.location.hostname === 'localhost' ?'http://localhost:3000/' : 'https://tarot-b3e06.firebaseapp.com/'}`\r\n}\r\n","import Avatar from \"components/Avatar\";\r\nimport Button from \"components/Button\";\r\nimport Text from \"components/Text\";\r\nimport { useState, useContext } from \"react\";\r\nimport { createGame, joinGame } from \"services/functions\";\r\nimport { generateID, generateAvatarUrl } from \"services/utils\";\r\nimport { toaster } from \"App\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport \"styles/Home.scss\";\r\nvar UsernameGenerator = require(\"username-generator\");\r\n\r\nconst basePseudo = UsernameGenerator.generateUsername();\r\n\r\nexport default function Home() {\r\n  const [avatarUrl, setAvatarUrl] = useState(generateAvatarUrl());\r\n  const [pseudo, setPseudo] = useState(basePseudo);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [gameID, setGameID] = useState(\"\");\r\n  const [disabled, setDisabled] = useState(false);\r\n  let { id: gameIDParam } = useParams<string>();\r\n  const invited: boolean = !!gameIDParam;\r\n  const showMessage = useContext(toaster);\r\n\r\n  //create the game\r\n  const create = async () => {\r\n    setDisabled(true);\r\n    try {\r\n      var fetchedgameID = await createGame(avatarUrl, generateID(), pseudo);\r\n      setGameID(fetchedgameID as string);\r\n      setRedirect(true);\r\n    } catch (error) {\r\n      showMessage(error as string);\r\n    }\r\n    setDisabled(false);\r\n  };\r\n\r\n  //join the game\r\n  const join = async () => {\r\n    setDisabled(true);\r\n    try {\r\n      await joinGame(\r\n        avatarUrl,\r\n        generateID(),\r\n        pseudo ?? basePseudo,\r\n        gameIDParam!\r\n      );\r\n      setRedirect(true);\r\n    } catch (error) {\r\n      showMessage(error as string);\r\n    }\r\n    setDisabled(false);\r\n  };\r\n\r\n  //redirect to the lobby page\r\n  if (redirect && !invited) {\r\n    return <Navigate to={`../lobby/${gameID}`} />;\r\n  } else if (redirect && invited) {\r\n    return <Navigate to={`../lobby/${gameIDParam}`} />;\r\n  }\r\n\r\n  const generateUrl = () => {\r\n    setAvatarUrl(generateAvatarUrl());\r\n  };\r\n\r\n  return (\r\n    <div className=\"page home\">\r\n      <div className=\"home__container\">\r\n        <div>\r\n          <div className=\"title\">\r\n            <Text content=\"Tarot\" />\r\n          </div>\r\n          {invited && (\r\n            <div className=\"\">\r\n              <Text content=\"You've been invited!\" />\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"home__avatar_container pseudo_container\">\r\n          <Avatar refreshAvatar={generateUrl} url={avatarUrl} />\r\n          <div className=\"home__pseudo_container avatar_container\">\r\n            <Text content=\"Choose a character and a name\" />\r\n            <input\r\n              type=\"text\"\r\n              className=\"home__pseudo\"\r\n              onChange={(event) => setPseudo(event.target.value)}\r\n              placeholder={basePseudo}\r\n            />\r\n            <Button\r\n              disabled={disabled}\r\n              label={invited ? \"Join\" : \"Create game\"}\r\n              onClick={invited ? join : create}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import firebase from \"services/firebase\";\r\nimport { doc, DocumentData, onSnapshot } from \"firebase/firestore\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst useGame = (id: string) => {\r\n  const [data, setData] = useState<DocumentData>();\r\n  const [isPending, setIsPending] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe: Function;\r\n\r\n    try {\r\n      unsubscribe = onSnapshot(doc(firebase.db, \"games\", id), (doc) => {\r\n        setData(doc.data());\r\n        setIsPending(false);\r\n      });\r\n    } catch (error) {\r\n      setError(error as string);\r\n    }\r\n\r\n    return () => unsubscribe();\r\n  }, [id]);\r\n\r\n  return { data, isPending, error };\r\n};\r\n\r\nexport default useGame;\r\n","export default __webpack_public_path__ + \"static/media/cross.6c7c55ca.svg\";","export default __webpack_public_path__ + \"static/media/crown.3f6caac5.svg\";","import { useState, useContext } from \"react\";\r\nimport { toaster } from \"App\";\r\nimport useGame from \"hooks/useGame\";\r\nimport Text from \"components/Text\";\r\nimport Avatar from \"components/Avatar\";\r\nimport Button from \"components/Button\";\r\nimport { getUrlBase } from \"services/utils\";\r\nimport { getPlayerID } from \"services/localStorage\";\r\nimport { kickUser, startGame } from \"services/functions\";\r\nimport cross from \"assets/cross.svg\";\r\nimport crown from \"assets/crown.svg\";\r\nimport { useParams, Navigate } from \"react-router-dom\";\r\nimport \"styles/Lobby.scss\";\r\n\r\nexport default function Lobby() {\r\n  const [error, setError] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  const showMessage = useContext(toaster);\r\n\r\n  const { id: gameID } = useParams<string>();\r\n\r\n  const { error: fetchError, isPending, data } = useGame(gameID ?? \"\");\r\n\r\n  if (redirect) {\r\n    return <Navigate to={`../../`} />;\r\n  }\r\n\r\n  if (!isPending && data && data?.state === \"start\") {\r\n    return <Navigate to={`../../game/${gameID}`} />;\r\n  }\r\n\r\n  if (fetchError) {\r\n    showMessage(fetchError);\r\n  }\r\n\r\n  const copyLink = () => {\r\n    setError(\"\");\r\n    const url = `${getUrlBase()}invite/${gameID}`;\r\n\r\n    navigator.clipboard.writeText(url).then(\r\n      function () {\r\n        setError(\"Link copied!\");\r\n      },\r\n      function (err) {\r\n        setError(\"An error has occured\");\r\n      }\r\n    );\r\n  };\r\n\r\n  const start = () => {\r\n    startGame(gameID!);\r\n  };\r\n\r\n  const isUserAdmin = () => {\r\n    const user = data?.users.find((user: any) => user.id === getPlayerID());\r\n\r\n    if (user) {\r\n      return !!user?.admin;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const deleteUser = (idUser: string) => {\r\n    try {\r\n      kickUser(idUser, gameID!);\r\n    } catch (error) {\r\n      showMessage(error as string);\r\n    }\r\n  };\r\n\r\n  if (\r\n    !isPending &&\r\n    !!data?.users &&\r\n    !data?.users.find((user: any) => user.id === getPlayerID())\r\n  ) {\r\n    console.log(!isPending, data?.users, getPlayerID());\r\n    setRedirect(true);\r\n  }\r\n\r\n  let startText = \"Start the game\";\r\n  if (window.screen.width <= 636) startText = \"Start\";\r\n\r\n  return (\r\n    <div className=\"page lobby\">\r\n      {!isPending && (\r\n        <div className=\"lobby__container\">\r\n          <div className=\"title\">\r\n            <Text content=\"Tarot\" />\r\n          </div>\r\n          <div className=\"lobby__invite\">\r\n            <Button label=\"Invite\" onClick={copyLink} />\r\n            <Text content={error} />\r\n          </div>\r\n          {playerList(data?.users ?? [], deleteUser)}\r\n          <div className=\"lobby__start_container lobby_item_mobile\">\r\n            {isUserAdmin() && (\r\n              <div className=\"lobby__start_message\">\r\n                <Text content=\"Ready to play ?\" />\r\n              </div>\r\n            )}\r\n            {isUserAdmin() && <Button label={startText} onClick={start} />}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction playerList(users: any[], deleteUser: Function) {\r\n  const isUserAdmin = () => {\r\n    return !!users.find((user) => user.id === getPlayerID())?.admin;\r\n  };\r\n\r\n  const clickCross = (id: string) => {\r\n    const userTargeted = users.find((user) => user.id === id);\r\n    const currentUser = users.find((user) => user.id === getPlayerID());\r\n\r\n    if (userTargeted && !userTargeted.admin && currentUser.admin) {\r\n      deleteUser(id);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"lobby__list\">\r\n      {users.map((user, index) => (\r\n        <div className=\"lobby__item\" key={index}>\r\n          <Avatar url={user.url} small={true} />\r\n          <div className=\"lobby__spacing\"></div>\r\n          <Text content={user?.name} />\r\n          {(user.admin || isUserAdmin()) && (\r\n            <img\r\n              alt=\"remove user\"\r\n              onClick={() => {\r\n                clickCross(user.id);\r\n              }}\r\n              src={user.admin ? crown : cross}\r\n              className={`lobby__svg ${\r\n                !user.admin ? \"lobby__svg_clickable\" : \"\"\r\n              }`}\r\n            />\r\n          )}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import Text from \"components/Text\";\r\nimport \"styles/Waiting.scss\";\r\n\r\ninterface WaitingProps {\r\n  users: any[];\r\n}\r\n\r\nexport default function WaitingRoom({ users }: WaitingProps) {\r\n  return (\r\n    <div>\r\n      {users.map((user) => {\r\n        return (\r\n          <div className=\"waiting\">\r\n            <Text\r\n              content={`name:${user.name} status:${\r\n                user.answersState.length >= 4 ? \"finished\" : \"wating\"\r\n              } values:${user.answersState}`}\r\n            />\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import Text from \"components/Text\";\r\nimport { useState } from \"react\";\r\n\r\ninterface TimerProps {\r\n  next: Function;\r\n}\r\n\r\nexport default function Timer({ next }: TimerProps) {\r\n  const [time, setTime] = useState(2);\r\n\r\n  setTimeout(() => {\r\n    if (time === 0) {\r\n      next();\r\n    }\r\n    setTime(time - 1);\r\n  }, 1000);\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <Text content={time.toString()} />\r\n    </div>\r\n  );\r\n}\r\n","import \"styles/buttonQuestion.scss\";\r\nimport Text from \"components/Text\";\r\n\r\ninterface buttonProps {\r\n  label: string;\r\n  type: string;\r\n  onClick: Function;\r\n}\r\n\r\nButtonQuestion.defaultProps = {\r\n  type: \"normal\",\r\n};\r\n\r\nexport default function ButtonQuestion({ label, type, onClick }: buttonProps) {\r\n  return (\r\n    <button\r\n      className={`buttonQ buttonQ__${type}`}\r\n      onClick={() => {\r\n        onClick();\r\n      }}\r\n    >\r\n      <Text content={label} />\r\n    </button>\r\n  );\r\n}\r\n","import \"styles/question.scss\";\r\nimport ButtonQuestion from \"components/ButtonQuestion\";\r\nimport Text from \"components/Text\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\ninterface questionProps {\r\n  question: any;\r\n  sendResult: Function;\r\n}\r\n\r\nexport default function Question({ question, sendResult }: questionProps) {\r\n  const [questions, setQuestions] = useState<any>([]);\r\n  const [reveal, setReveal] = useState<any>(false);\r\n\r\n  useEffect(() => {\r\n    setReveal(false);\r\n    var tmp = question[3].map((q: any) => {\r\n      return { label: q.value, state: q.state };\r\n    });\r\n\r\n    setQuestions(tmp);\r\n  }, [question]);\r\n\r\n  const click = (value: any) => {\r\n    console.log(\"click\");\r\n    setReveal(true);\r\n    setTimeout(() => {\r\n      sendResult(value.state);\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"question\">\r\n      <div className=\"question__header\" />\r\n      <div className=\"question__main\">\r\n        <div className=\"question__info\">\r\n          <Text content={`${question[0]} - ${question[1]}`.toUpperCase()} />\r\n          <div className=\"question__title\">\r\n            <Text content={`${question[2]}`} />\r\n          </div>\r\n        </div>\r\n        {questions.length > 0 && (\r\n          <div className=\"question__groupe\">\r\n            <ButtonQuestion\r\n              type={\r\n                reveal ? (questions[0].state ? \"valide\" : \"false\") : \"normal\"\r\n              }\r\n              label={questions[0].label}\r\n              onClick={() => click(questions[0])}\r\n            />\r\n            <ButtonQuestion\r\n              type={\r\n                reveal ? (questions[1].state ? \"valide\" : \"false\") : \"normal\"\r\n              }\r\n              label={questions[1].label}\r\n              onClick={() => click(questions[1])}\r\n            />\r\n            <ButtonQuestion\r\n              type={\r\n                reveal ? (questions[2].state ? \"valide\" : \"false\") : \"normal\"\r\n              }\r\n              label={questions[2].label}\r\n              onClick={() => click(questions[2])}\r\n            />\r\n            <ButtonQuestion\r\n              type={\r\n                reveal ? (questions[3].state ? \"valide\" : \"false\") : \"normal\"\r\n              }\r\n              label={questions[3].label}\r\n              onClick={() => click(questions[3])}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { Component, useContext } from \"react\";\r\nimport useGame from \"hooks/useGame\";\r\nimport Waiting from \"components/WaitingRoom\";\r\nimport Timer from \"components/Timer\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Question from \"components/Question\";\r\nimport { toaster } from \"App\";\r\nimport \"styles/Board.scss\";\r\nimport \"styles/player.scss\";\r\nimport { getPlayerID } from \"services/localStorage\";\r\nimport { sendResult } from \"services/functions\";\r\n\r\ninterface IProps {\r\n  game: any;\r\n  showMessage: Function;\r\n  gameID: string;\r\n}\r\n\r\nexport default function Board() {\r\n  const { id: gameID } = useParams<string>();\r\n\r\n  let testID: string = \"Icef7RKtrq5pIMaDGL1e\";\r\n  if (gameID && gameID?.length > 10) testID = gameID;\r\n\r\n  const { error, isPending, data } = useGame(testID);\r\n  const showMessage = useContext(toaster);\r\n\r\n  if (!!error) {\r\n    showMessage(error as string);\r\n  }\r\n\r\n  return (\r\n    <div className=\"page board\">\r\n      {!isPending && !error && !!data && gameID && (\r\n        <BoarPage gameID={gameID} game={data} showMessage={showMessage} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\ninterface IState {\r\n  subState: String;\r\n  currentQuestionIndex: 0;\r\n  user: any;\r\n}\r\n\r\nclass BoarPage extends Component<IProps, IState> {\r\n  constructor(props: IProps) {\r\n    super(props);\r\n\r\n    const user = props.game.users.find(\r\n      (user: any) => user.id === getPlayerID()\r\n    );\r\n\r\n    let state: string = user.answersState.length > 0 ? \"questions\" : \"timer\";\r\n    if (user.answersState.length === 4) {\r\n      state = \"waiting\";\r\n    }\r\n\r\n    this.state = {\r\n      currentQuestionIndex: user.answersState.length,\r\n      subState: state,\r\n      user,\r\n    };\r\n  }\r\n\r\n  startQuestions = () => {\r\n    this.setState((state) => {\r\n      return { subState: \"questions\" };\r\n    });\r\n  };\r\n\r\n  handleResult = async (valide: boolean) => {\r\n    await sendResult(this.props.gameID, this.state.user.id, valide);\r\n\r\n    if (this.state.currentQuestionIndex >= 3) {\r\n      this.setState((state: any) => {\r\n        return { subState: \"waiting\" };\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.setState((state: any) => {\r\n      return { currentQuestionIndex: state.currentQuestionIndex + 1 };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.subState === \"timer\") {\r\n      return <Timer next={this.startQuestions} />;\r\n    }\r\n    if (this.state.subState === \"waiting\") {\r\n      return <Waiting users={this.props.game.users} />;\r\n    }\r\n    if (this.state.subState === \"questions\") {\r\n      const ques = this.props.game.questions[this.state.currentQuestionIndex];\r\n      console.log(this.props.game);\r\n      return (\r\n        <Question\r\n          question={[\r\n            ques.category,\r\n            ques.difficulty,\r\n            ques.question,\r\n            ques.answers,\r\n          ]}\r\n          sendResult={this.handleResult}\r\n        />\r\n      );\r\n    }\r\n  }\r\n}\r\n","import \"./App.scss\";\r\nimport Home from \"pages/Home\";\r\nimport Lobby from \"pages/Lobby\";\r\nimport Board from \"pages/Board\";\r\nimport Text from \"components/Text\";\r\nimport { createContext, useState } from \"react\";\r\nimport \"services/firebase\";\r\n\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\n\r\nexport const toaster = createContext((_message: string) => {});\r\n\r\nfunction App() {\r\n  const [message, setMessage] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n\r\n  const showMessage = (_message: string) => {\r\n    setMessage(_message);\r\n    setError(true);\r\n    setTimeout(() => {\r\n      setError(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className={`toaster__container ${error && \"toaster__up\"}`}>\r\n        <div className=\"toaster__content\">\r\n          <Text content={message} />\r\n        </div>\r\n      </div>\r\n      <toaster.Provider value={showMessage}>\r\n        <Routes>\r\n          <Route path=\"/lobby/:id\" element={<Lobby />} />\r\n          <Route path=\"/invite/:id\" element={<Home />} />\r\n          <Route path=\"/game/:id\" element={<Board />} />\r\n          <Route path=\"/\" element={<Home />} />\r\n        </Routes>\r\n      </toaster.Provider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n//import firebase from 'service/firebase'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}